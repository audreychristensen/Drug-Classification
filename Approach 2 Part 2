{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Make copies of this workbook if you are going to play with new model inputs! Because this one at least runs even if the accuracy is only 17% lol\n",
        "\n",
        "Also be sure to subset the metadata first to like 200 observations just to play with different options so it doesn't take so long"
      ],
      "metadata": {
        "id": "BfAAKYCdLnc1"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G1nRYJN8I85O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2b8b33ab-9b82-4760-bd66-691389f8194a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import time, os, sys, random\n",
        "from urllib.parse import urlparse\n",
        "import skimage.io\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib as mpl\n",
        "%matplotlib inline\n",
        "mpl.rcParams['figure.dpi'] = 300\n",
        "\n",
        "from urllib.parse import urlparse\n",
        "import shutil\n",
        "\n",
        "import os\n",
        "from torch.utils.data import Dataset\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "from torchvision import transforms, models\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from PIL import Image\n",
        "from sklearn.model_selection import train_test_split\n",
        "import torch.optim as optim"
      ],
      "metadata": {
        "id": "HssYm_WfJ5PJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torchvision import transforms\n",
        "from torch.utils.data import DataLoader, Dataset\n",
        "from PIL import Image"
      ],
      "metadata": {
        "id": "hNKGxEA8Tro8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F"
      ],
      "metadata": {
        "id": "KfnTpFlOW5Ut"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "print (device)"
      ],
      "metadata": {
        "id": "_pyEV56YJ5J7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "98f53bf0-c5b3-423c-8344-a6ec13800f21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cuda:0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Create metadata dataframe"
      ],
      "metadata": {
        "id": "k0tEbukPKchb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "metadata = pd.read_csv('/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/metadata_resampled')"
      ],
      "metadata": {
        "id": "eGnfCibRJ5HY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Add mask file names\n",
        "\n",
        "metadata['mask_filename'] = 'masked_' + metadata['Downsampled_FileName']"
      ],
      "metadata": {
        "id": "4puh5ykoVGuF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "drug_names = metadata['Metadata_pert_iname'].unique()\n",
        "drug_to_idx = {name: idx for idx, name in enumerate(drug_names)}"
      ],
      "metadata": {
        "id": "Dah35LxlVop-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(drug_names)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KBgcdMn-W96e",
        "outputId": "62212f81-876a-45e9-e132-3dd8cdc0788a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "250"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Define dataset class"
      ],
      "metadata": {
        "id": "GZQnCLrKKhrK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mask_dir = '/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/downsampled_data/NewMasks'"
      ],
      "metadata": {
        "id": "DIbyLuybJ4_j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "path = '/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/downsampled_data/r01c01f01_median_aggregated.tiff'\n",
        "mask = Image.open(path).convert(\"L\")"
      ],
      "metadata": {
        "id": "LaFJDNCTV9aP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mask.size"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yiV__GNtWEwy",
        "outputId": "a09e289f-d71d-44ee-f9ed-c8b5603aa7f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1080, 1080)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# current\n",
        "\n",
        "class CellDataset(Dataset):\n",
        "    def __init__(self, metadata, mask_dir, drug_to_idx, transform=None):\n",
        "        self.metadata = metadata\n",
        "        self.mask_dir = mask_dir\n",
        "        self.drug_to_idx = drug_to_idx\n",
        "        self.transform = transform\n",
        "        print(f\"Initialized CellDataset with {len(drug_to_idx)} drugs.\")\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.metadata)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        mask_name = self.metadata.iloc[idx]['mask_filename']\n",
        "        mask_path = os.path.join(self.mask_dir, mask_name)\n",
        "        try:\n",
        "            # Try to load the mask image\n",
        "            mask = Image.open(mask_path).convert(\"L\")\n",
        "        except FileNotFoundError:\n",
        "            print(f\"File not found: {mask_path}. Skipping this sample.\")\n",
        "            # Optionally, you could return a dummy tensor or raise an exception\n",
        "            return torch.zeros((1, 224, 224)), -1\n",
        "\n",
        "        # mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n",
        "        # mask = Image.fromarray(mask)\n",
        "\n",
        "        # Apply transformations if provided\n",
        "        if self.transform:\n",
        "            mask = self.transform(mask)\n",
        "\n",
        "        drug_name = self.metadata.iloc[idx]['Metadata_pert_iname']\n",
        "        label = self.drug_to_idx[drug_name]\n",
        "\n",
        "        print(mask.shape)\n",
        "        return mask, label\n"
      ],
      "metadata": {
        "id": "BSYpZy7MKXYP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define transformations\n",
        "data_transforms = transforms.Compose([\n",
        "    transforms.Resize((224, 224)),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.RandomVerticalFlip(),\n",
        "    transforms.RandomRotation(20),\n",
        "    transforms.ToTensor()\n",
        "])\n"
      ],
      "metadata": {
        "id": "aaXMEj31TlGl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class SimpleCNN(nn.Module):\n",
        "    def __init__(self, num_classes):\n",
        "        super(SimpleCNN, self).__init__()\n",
        "\n",
        "        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, stride=1, padding=1)  # Output: 32 x 224 x 224\n",
        "        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=1)  # Output: 64 x 224 x 224\n",
        "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)  # Output: 32 x 112 x 112\n",
        "        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)  # Output: 128 x 112 x 112\n",
        "        self.conv4 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=1, padding=1)  # Output: 256 x 112 x 112\n",
        "\n",
        "        # After the pooling layers\n",
        "        self.fc1 = nn.Linear(256 * 14 * 14, 512)  # Adjusted input size\n",
        "        self.fc2 = nn.Linear(512, num_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.pool(F.relu(self.conv1(x)))  # Output: 32 x 112 x 112\n",
        "        x = self.pool(F.relu(self.conv2(x)))  # Output: 64 x 56 x 56\n",
        "        x = self.pool(F.relu(self.conv3(x)))  # Output: 128 x 28 x 28\n",
        "        x = self.pool(F.relu(self.conv4(x)))  # Output: 256 x 14 x 14\n",
        "\n",
        "        # Flatten the tensor for the fully connected layer\n",
        "        x = x.view(-1, 256 * 14 * 14)  # Now it's correct\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "\n",
        "        return x"
      ],
      "metadata": {
        "id": "-3qBcV5ITqIo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class ResNetClassifier(nn.Module):\n",
        "    def __init__(self, num_classes):\n",
        "        super(ResNetClassifier, self).__init__()\n",
        "        # Load a pre-trained ResNet model\n",
        "        self.resnet = models.resnet18(pretrained=True)\n",
        "\n",
        "        # Modify the first convolutional layer to accept a single-channel input\n",
        "        self.resnet.conv1 = nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
        "\n",
        "        # Replace the final fully connected layer to match the number of classes\n",
        "        in_features = self.resnet.fc.in_features\n",
        "        self.resnet.fc = nn.Linear(in_features, num_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.resnet(x)\n"
      ],
      "metadata": {
        "id": "4NAO8LzYfYjL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_transforms = transforms.Compose([\n",
        "    transforms.Resize((224, 224)),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.RandomVerticalFlip(),\n",
        "    transforms.RandomRotation(20),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize(mean=[0.485], std=[0.229])  # Adjust for grayscale\n",
        "])\n"
      ],
      "metadata": {
        "id": "PUtnPFkgfg0e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_metadata, test_metadata = train_test_split(metadata, test_size=0.2, random_state=42)\n",
        "\n",
        "# Creating the dataset instances\n",
        "train_dataset = CellDataset(train_metadata, mask_dir, drug_to_idx, transform=data_transforms)\n",
        "test_dataset = CellDataset(test_metadata, mask_dir, drug_to_idx, transform=data_transforms)\n",
        "\n",
        "# Creating DataLoader for batching\n",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qGg8NkY6fy7B",
        "outputId": "426e6695-7e06-4f4d-c533-e209b822cfa5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initialized CellDataset with 250 drugs.\n",
            "Initialized CellDataset with 250 drugs.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_classes = len(drug_names)\n",
        "model = SimpleCNN(num_classes=num_classes)\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)"
      ],
      "metadata": {
        "id": "glPjYu2AU9Ya"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_classes = len(drug_to_idx)  # Number of classes based on your dataset\n",
        "model = ResNetClassifier(num_classes).to(device)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NpBOkEW_f73U",
        "outputId": "57981705-dd84-478e-ab77-20b052e74d17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
            "  warnings.warn(msg)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_epochs = 1"
      ],
      "metadata": {
        "id": "MWtZ-TSHXPTH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for epoch in range(num_epochs):\n",
        "    running_loss = 0.0\n",
        "    for inputs, labels in train_loader:\n",
        "        inputs, labels = inputs.to(device), labels.to(device)\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # Filter out samples with the dummy label (-1)\n",
        "        valid_indices = labels != -1\n",
        "        if not valid_indices.any():  # Skip this batch if all labels are dummy\n",
        "            continue\n",
        "\n",
        "        # Select only valid inputs and labels\n",
        "        inputs = inputs[valid_indices]\n",
        "        labels = labels[valid_indices]\n",
        "\n",
        "        # Forward pass\n",
        "        outputs = model(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "\n",
        "        # Backward pass and optimization\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        running_loss += loss.item()\n",
        "\n",
        "    # Calculate and print the average loss for the epoch\n",
        "    avg_loss = running_loss / len(train_loader)  # Using len(train_loader) for average\n",
        "    print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {avg_loss:.4f}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HRV0XdXEazKi",
        "outputId": "6dade0cf-8768-4c30-9a5e-166ac6926124",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "Epoch [1/1], Loss: 5.7243\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "\n",
        "def evaluate(model, dataloader, device):\n",
        "    model.eval()  # Set the model to evaluation mode\n",
        "    all_preds = []\n",
        "    all_labels = []\n",
        "\n",
        "    with torch.no_grad():  # No gradient calculation during evaluation\n",
        "        for inputs, labels in dataloader:\n",
        "            # Move inputs and labels to the device (CPU or GPU)\n",
        "            inputs = inputs.to(device)\n",
        "            labels = labels.to(device)\n",
        "\n",
        "            # Filter out samples with the dummy label (-1)\n",
        "            valid_indices = labels != -1\n",
        "            if not valid_indices.any():  # Skip this batch if all labels are dummy\n",
        "                continue\n",
        "\n",
        "            # Select only valid inputs and labels\n",
        "            inputs = inputs[valid_indices]\n",
        "            labels = labels[valid_indices]\n",
        "\n",
        "            # Forward pass to get outputs\n",
        "            outputs = model(inputs)\n",
        "\n",
        "            # Get predictions\n",
        "            _, predicted = torch.max(outputs, 1)\n",
        "\n",
        "            # Append predictions and labels\n",
        "            all_preds.extend(predicted.cpu().numpy())  # Move predictions to CPU for further processing\n",
        "            all_labels.extend(labels.cpu().numpy())    # Move labels to CPU\n",
        "\n",
        "    # Calculate evaluation metrics\n",
        "    accuracy = accuracy_score(all_labels, all_preds)\n",
        "    precision = precision_score(all_labels, all_preds, average='weighted', zero_division=0)\n",
        "    recall = recall_score(all_labels, all_preds, average='weighted', zero_division=0)\n",
        "    f1 = f1_score(all_labels, all_preds, average='weighted', zero_division=0)\n",
        "\n",
        "    # Print the evaluation results\n",
        "    print(f'Evaluation Metrics:')\n",
        "    print(f'Accuracy: {accuracy:.4f}')\n",
        "    print(f'Precision: {precision:.4f}')\n",
        "    print(f'Recall: {recall:.4f}')\n",
        "    print(f'F1 Score: {f1:.4f}')\n",
        "\n",
        "    return accuracy, precision, recall, f1\n"
      ],
      "metadata": {
        "id": "rsjqZJJma6Iq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.to(device)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0p-qeyquegik",
        "outputId": "fd8087da-4bed-421a-8168-bd8ac46f08fa",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SimpleCNN(\n",
              "  (conv1): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv4): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (fc1): Linear(in_features=50176, out_features=512, bias=True)\n",
              "  (fc2): Linear(in_features=512, out_features=250, bias=True)\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "evaluate(model, test_loader, device)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_KE22m3PbJli",
        "outputId": "3faf2749-4d46-4767-8921-edacaf442817",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "File not found: /content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/downsampled_data/NewMasks/masked_r05c22f06_median_aggregated.tiff. Skipping this sample.\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "Evaluation Metrics:\n",
            "Accuracy: 0.0022\n",
            "Precision: 0.0000\n",
            "Recall: 0.0022\n",
            "F1 Score: 0.0001\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.002242152466367713,\n",
              " 3.800258417572395e-05,\n",
              " 0.002242152466367713,\n",
              " 7.473841554559044e-05)"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for epoch in range(num_epochs):\n",
        "    running_loss = 0.0\n",
        "    for inputs, labels in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # Forward pass\n",
        "        outputs = model(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "\n",
        "        # Backward pass and optimization\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        running_loss += loss.item()\n",
        "\n",
        "    print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {running_loss / len(dataloader):.4f}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0SkH--MVXL7R",
        "outputId": "db6eb90a-a6f5-4974-e572-4f5e04160405"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n",
            "torch.Size([1, 224, 224])\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-47-1823fab6c107>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0;31m# Forward pass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m         \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1552\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1553\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1554\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1555\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1560\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1561\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1563\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-43-4417a0edbbb2>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Output: 32 x 112 x 112\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Output: 64 x 56 x 56\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv3\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Output: 128 x 28 x 28\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1552\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1553\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1554\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1555\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1560\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1561\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1563\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/pooling.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 164\u001b[0;31m         return F.max_pool2d(input, self.kernel_size, self.stride,\n\u001b[0m\u001b[1;32m    165\u001b[0m                             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdilation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mceil_mode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mceil_mode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    166\u001b[0m                             return_indices=self.return_indices)\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/_jit_internal.py\u001b[0m in \u001b[0;36mfn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    501\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mif_true\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mif_false\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    505\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mif_true\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mif_false\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36m_max_pool2d\u001b[0;34m(input, kernel_size, stride, padding, dilation, ceil_mode, return_indices)\u001b[0m\n\u001b[1;32m    794\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mstride\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    795\u001b[0m         \u001b[0mstride\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mannotate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mList\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 796\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_pool2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstride\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdilation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mceil_mode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    797\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    798\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6Ov1RMnbXL4q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zZWyjAdSXL2V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uRAvKI9JXLz0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wQOrPYtbXLw_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zgJaArc8XLqY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dW-zdCB-J46k"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
