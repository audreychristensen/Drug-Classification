{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G1nRYJN8I85O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a87f193-6bad-4788-c27b-18f5282d99ad"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import time, os, sys, random\n",
        "from urllib.parse import urlparse\n",
        "import skimage.io\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib as mpl\n",
        "%matplotlib inline\n",
        "mpl.rcParams['figure.dpi'] = 300\n",
        "\n",
        "from urllib.parse import urlparse\n",
        "import shutil\n",
        "\n",
        "import os\n",
        "from torch.utils.data import Dataset\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "from torchvision import transforms, models\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from PIL import Image\n",
        "from sklearn.model_selection import train_test_split\n",
        "import torch.optim as optim"
      ],
      "metadata": {
        "id": "HssYm_WfJ5PJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "print (device)"
      ],
      "metadata": {
        "id": "_pyEV56YJ5J7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65c812f7-1838-4c18-b150-dc42ce1865bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cpu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Create metadata dataframe"
      ],
      "metadata": {
        "id": "k0tEbukPKchb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "metadata = pd.read_csv('/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/metadata_BR00116991.csv')\n",
        "\n",
        "downsampled_data_dir = '/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/downsampled_data'\n",
        "downsampled_files = os.listdir(downsampled_data_dir)\n",
        "\n",
        "mask_dir = '/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/downsampled_data/Masks'\n",
        "mask_files = os.listdir(mask_dir)"
      ],
      "metadata": {
        "id": "eGnfCibRJ5HY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "downsampled_mapping = {}\n",
        "\n",
        "for downsampled_file in downsampled_files:\n",
        "    common_identifier = downsampled_file[:9]  # Get the first 9 characters\n",
        "    downsampled_mapping[common_identifier] = downsampled_file\n",
        "\n",
        "def associate_filenames(row):\n",
        "    original_identifier = row['FileName_OrigRNA'][:9]  # Get the first 9 characters\n",
        "    downsampled_file = downsampled_mapping.get(original_identifier, None)  # Returns None if not found\n",
        "    return pd.Series([downsampled_file, original_identifier])  # Return both downsampled and original identifiers\n",
        "\n",
        "metadata[['Downsampled_FileName', 'Shortened_OrigRNA']] = metadata.apply(associate_filenames, axis=1)"
      ],
      "metadata": {
        "id": "5AHJLFTAJ5Eu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metadata['MASK_Downsampled_FileName'] = 'MASK_' + metadata['Shortened_OrigRNA'] + '_median_aggregated.tif'\n",
        "\n",
        "condition = metadata['Downsampled_FileName'].isnull()\n",
        "\n",
        "metadata = metadata[~(condition)]\n",
        "\n",
        "drug_names = metadata['Metadata_pert_iname'].unique()\n",
        "drug_to_idx = {name: idx for idx, name in enumerate(drug_names)}"
      ],
      "metadata": {
        "id": "6sgmJxx3J5CD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Define dataset class"
      ],
      "metadata": {
        "id": "GZQnCLrKKhrK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "img_dir = '/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/downsampled_data'\n",
        "mask_dir = '/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/downsampled_data/Masks'"
      ],
      "metadata": {
        "id": "DIbyLuybJ4_j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# current\n",
        "\n",
        "class CellDataset(Dataset):\n",
        "    def __init__(self, metadata, img_dir, mask_dir, drug_to_idx, transform=None):\n",
        "        self.metadata = metadata\n",
        "        self.img_dir = img_dir\n",
        "        self.mask_dir = mask_dir\n",
        "        self.drug_to_idx = drug_to_idx\n",
        "        self.transform = transform\n",
        "        print(f\"Initialized CellDataset with {len(drug_to_idx)} drugs.\")\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.metadata)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        img_name = self.metadata.iloc[idx]['Downsampled_FileName']\n",
        "        mask_name = self.metadata.iloc[idx]['MASK_Downsampled_FileName']\n",
        "        img_path = os.path.join(self.img_dir, img_name)\n",
        "        mask_path = os.path.join(self.mask_dir, mask_name)\n",
        "\n",
        "\n",
        "        image = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n",
        "        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n",
        "\n",
        "        image = Image.fromarray(image)\n",
        "        mask = Image.fromarray(mask)\n",
        "\n",
        "\n",
        "        if self.transform:\n",
        "            image = self.transform(image)\n",
        "            mask = self.transform(mask)\n",
        "\n",
        "\n",
        "        combined_input = torch.stack((image, mask), dim=0)\n",
        "        combined_input = combined_input.squeeze(1)\n",
        "\n",
        "\n",
        "        drug_name = self.metadata.iloc[idx]['Metadata_pert_iname']\n",
        "        label = self.drug_to_idx[drug_name]\n",
        "\n",
        "        print(combined_input.shape)\n",
        "        return combined_input, label\n"
      ],
      "metadata": {
        "id": "BSYpZy7MKXYP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_transform = transforms.Compose([\n",
        "    transforms.Resize((224, 224)),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.5,), (0.5,))\n",
        "])"
      ],
      "metadata": {
        "id": "R40nR2m-KXV7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Create datasets"
      ],
      "metadata": {
        "id": "RDYhnqP7K5a5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_metadata, test_metadata = train_test_split(metadata, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "LcBpPo7uKXTp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_dataset = CellDataset(\n",
        "    train_metadata,\n",
        "    img_dir,\n",
        "    mask_dir,\n",
        "    drug_to_idx=drug_to_idx,\n",
        "    transform=data_transform\n",
        ")\n",
        "\n",
        "test_dataset = CellDataset(\n",
        "    test_metadata,\n",
        "    img_dir,\n",
        "    mask_dir,\n",
        "    drug_to_idx=drug_to_idx,\n",
        "    transform=data_transform\n",
        ")"
      ],
      "metadata": {
        "id": "5l4Pt3Q6K9AP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ac43b41e-f1af-405c-a153-215e07fbe26b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initialized CellDataset with 250 drugs.\n",
            "Initialized CellDataset with 250 drugs.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)"
      ],
      "metadata": {
        "id": "PXo31kEmKXRS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Define Model"
      ],
      "metadata": {
        "id": "oGW9wOkLLE0O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "class DualInputCNN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(DualInputCNN, self).__init__()\n",
        "\n",
        "        self.conv1 = nn.Conv2d(in_channels=2, out_channels=32, kernel_size=3, padding=1)  # (2, 224, 224) -> (32, 224, 224)\n",
        "        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1)  # (32, 224, 224) -> (64, 224, 224)\n",
        "        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1)  # (64, 224, 224) -> (128, 224, 224)\n",
        "        self.conv4 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1)  # (128, 224, 224) -> (256, 224, 224)\n",
        "\n",
        "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "\n",
        "        # Fully Connected Layers\n",
        "        self.fc1 = nn.Linear(256 * 14 * 14, 512)\n",
        "        self.fc2 = nn.Linear(512, 128)\n",
        "        self.fc3 = nn.Linear(128, 250)\n",
        "\n",
        "    def forward(self, x):\n",
        "        # Pass through conv layers with ReLU activations and pooling\n",
        "        x = self.pool(F.relu(self.conv1(x)))  # Output shape: (N, 32, 112, 112)\n",
        "        x = self.pool(F.relu(self.conv2(x)))  # Output shape: (N, 64, 56, 56)\n",
        "        x = self.pool(F.relu(self.conv3(x)))  # Output shape: (N, 128, 28, 28)\n",
        "        x = self.pool(F.relu(self.conv4(x)))  # Output shape: (N, 256, 14, 14)\n",
        "\n",
        "\n",
        "        x = x.view(x.size(0), -1)\n",
        "\n",
        "\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = F.relu(self.fc2(x))\n",
        "        x = self.fc3(x)\n",
        "\n",
        "        return x\n",
        "\n",
        "# Instantiate the model\n",
        "model = DualInputCNN()\n",
        "\n",
        "# Print the model architecture\n",
        "print(model)\n",
        "\n",
        "# Testing with a dummy input\n",
        "dummy_input = torch.randn(1, 2, 224, 224)  # Shape: (batch_size, channels, height, width)\n",
        "output = model(dummy_input)\n",
        "print(\"Output shape:\", output.shape)  # Should be (1, 250)\n"
      ],
      "metadata": {
        "id": "0i_yTd-uKXO4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "abac530c-8ea2-45f9-8372-0836795376fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DualInputCNN(\n",
            "  (conv1): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "  (conv4): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "  (fc1): Linear(in_features=50176, out_features=512, bias=True)\n",
            "  (fc2): Linear(in_features=512, out_features=128, bias=True)\n",
            "  (fc3): Linear(in_features=128, out_features=250, bias=True)\n",
            ")\n",
            "Output shape: torch.Size([1, 250])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)"
      ],
      "metadata": {
        "id": "H0cXex-OwjU_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Training loop\n",
        "num_epochs = 1  # Set the number of epochs\n",
        "for epoch in range(num_epochs):\n",
        "    model.train()  # Set the model to training mode\n",
        "    running_loss = 0.0\n",
        "\n",
        "    for inputs, labels in train_loader:\n",
        "        optimizer.zero_grad()  # Zero the parameter gradients\n",
        "\n",
        "        outputs = model(inputs)  # Forward pass\n",
        "        loss = criterion(outputs, labels)  # Calculate loss\n",
        "        loss.backward()  # Backward pass\n",
        "        optimizer.step()  # Optimize\n",
        "\n",
        "        running_loss += loss.item()\n",
        "\n",
        "    # Print statistics for the epoch\n",
        "    print(f\"Epoch [{epoch + 1}/{num_epochs}], Loss: {running_loss / len(train_loader):.4f}\")"
      ],
      "metadata": {
        "id": "g1iUYJFbKXMP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "outputId": "e496060f-2191-4582-aa53-e5d0825fd496"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-9c4187e6e93c>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0mrunning_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m         \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Zero the parameter gradients\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    699\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 701\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             if (\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    755\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 757\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    758\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36mfetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-11-58b20316faae>\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, idx)\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0;31m# Load images and masks (assuming they are grayscale)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIMREAD_GRAYSCALE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m         \u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmask_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIMREAD_GRAYSCALE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m         \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfromarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## to save model - be sure to make a new path if it is a new model!\n",
        "\n",
        "# torch.save(model.state_dict(), '/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/model.pth')"
      ],
      "metadata": {
        "id": "F9MiZIkLLZ0b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## to retrieve\n",
        "\n",
        "model = DualInputCNN()\n",
        "model.load_state_dict(torch.load('/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/model.pth'))"
      ],
      "metadata": {
        "id": "WuJ2sa-fLfXt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20fb00f5-9a69-4815-e72a-4c3a118de683"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-6-a02e683be26e>:4: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
            "  model.load_state_dict(torch.load('/content/gdrive/MyDrive/F2024/Applied Data Science/Project 2/model.pth'))\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<All keys matched successfully>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total_loss = 0\n",
        "correct = 0\n",
        "total = 0\n",
        "\n",
        "# Lists to store the results for each item\n",
        "predictions = []\n",
        "true_labels = []\n",
        "accurate_predictions = []"
      ],
      "metadata": {
        "id": "BjMblDmKy1kq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.eval()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CZ1VmAOMy9sX",
        "outputId": "e1a20879-23a6-4da7-8ccd-4b7b71762cf8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DualInputCNN(\n",
              "  (conv1): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv4): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  (fc1): Linear(in_features=50176, out_features=512, bias=True)\n",
              "  (fc2): Linear(in_features=512, out_features=128, bias=True)\n",
              "  (fc3): Linear(in_features=128, out_features=250, bias=True)\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with torch.no_grad():\n",
        "    for inputs, labels in test_loader:\n",
        "        # Move inputs and labels to the device if using GPU\n",
        "        inputs, labels = inputs.to(device), labels.to(device)\n",
        "\n",
        "        # Forward pass\n",
        "        outputs = model(inputs)\n",
        "\n",
        "        # Compute the loss\n",
        "        loss = criterion(outputs, labels)\n",
        "        total_loss += loss.item()\n",
        "\n",
        "        # Get the predicted class\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "\n",
        "        # Update the number of correct predictions\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "\n",
        "        # Store predictions and labels for each item\n",
        "        predictions.extend(predicted.cpu().numpy())\n",
        "        true_labels.extend(labels.cpu().numpy())\n",
        "        accurate_predictions.extend((predicted == labels).cpu().numpy())\n",
        "\n",
        "# Calculate average loss and accuracy\n",
        "average_loss = total_loss / len(test_loader)\n",
        "accuracy = 100 * correct / total\n",
        "\n",
        "# Print accuracy metrics\n",
        "print(f'Average Loss: {average_loss:.4f}')\n",
        "print(f'Accuracy: {accuracy:.2f}%')\n",
        "\n",
        "# Identify correct and incorrect predictions\n",
        "incorrect_indices = [i for i, correct in enumerate(accurate_predictions) if not correct]\n",
        "correct_indices = [i for i, correct in enumerate(accurate_predictions) if correct]\n",
        "\n",
        "print(\"Incorrectly predicted indices:\", incorrect_indices)\n",
        "print(\"Correctly predicted indices:\", correct_indices)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "LjTsA6k4y8ht",
        "outputId": "dab73e8a-5c5b-4d2d-b235-506c7bd824bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "torch.Size([2, 224, 224])\n",
            "Average Loss: 5.1104\n",
            "Accuracy: 16.90%\n",
            "Incorrectly predicted indices: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 21, 22, 23, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573]\n",
            "Correctly predicted indices: [1, 14, 17, 19, 20, 24, 28, 31, 38, 46, 48, 49, 55, 59, 75, 76, 78, 85, 90, 98, 99, 100, 108, 113, 116, 127, 132, 133, 134, 139, 141, 147, 148, 149, 159, 166, 169, 179, 204, 205, 212, 213, 216, 219, 228, 239, 244, 251, 253, 256, 266, 270, 271, 276, 277, 288, 290, 299, 315, 317, 322, 325, 338, 344, 348, 357, 358, 415, 417, 419, 420, 435, 441, 444, 451, 455, 465, 466, 467, 480, 482, 490, 501, 502, 504, 505, 514, 520, 528, 532, 534, 539, 542, 558, 559, 565, 570]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "incorrect_preds = [(true_labels[i], predictions[i]) for i in incorrect_indices]\n",
        "correct_preds = [(true_labels[i], predictions[i]) for i in correct_indices]\n",
        "\n",
        "# Print results\n",
        "print(\"\\nIncorrect Predictions (True Label, Predicted Label):\")\n",
        "for true, pred in incorrect_preds:\n",
        "    print(f\"True: {true}, Predicted: {pred}\")\n",
        "\n",
        "print(\"\\nCorrect Predictions (True Label, Predicted Label):\")\n",
        "for true, pred in correct_preds:\n",
        "    print(f\"True: {true}, Predicted: {pred}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "alZsNgJvzedS",
        "outputId": "01b2b085-5b0d-4041-a67a-42e23b2d3981"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Incorrect Predictions (True Label, Predicted Label):\n",
            "True: 45, Predicted: 1\n",
            "True: 74, Predicted: 1\n",
            "True: 62, Predicted: 1\n",
            "True: 233, Predicted: 1\n",
            "True: 128, Predicted: 1\n",
            "True: 141, Predicted: 1\n",
            "True: 203, Predicted: 1\n",
            "True: 75, Predicted: 1\n",
            "True: 232, Predicted: 1\n",
            "True: 122, Predicted: 1\n",
            "True: 219, Predicted: 1\n",
            "True: 133, Predicted: 1\n",
            "True: 57, Predicted: 1\n",
            "True: 29, Predicted: 1\n",
            "True: 133, Predicted: 1\n",
            "True: 132, Predicted: 1\n",
            "True: 191, Predicted: 1\n",
            "True: 146, Predicted: 1\n",
            "True: 211, Predicted: 1\n",
            "True: 51, Predicted: 1\n",
            "True: 123, Predicted: 1\n",
            "True: 173, Predicted: 1\n",
            "True: 61, Predicted: 1\n",
            "True: 143, Predicted: 1\n",
            "True: 108, Predicted: 1\n",
            "True: 36, Predicted: 1\n",
            "True: 119, Predicted: 1\n",
            "True: 94, Predicted: 1\n",
            "True: 16, Predicted: 1\n",
            "True: 92, Predicted: 1\n",
            "True: 124, Predicted: 1\n",
            "True: 89, Predicted: 1\n",
            "True: 247, Predicted: 1\n",
            "True: 89, Predicted: 1\n",
            "True: 194, Predicted: 1\n",
            "True: 144, Predicted: 1\n",
            "True: 125, Predicted: 1\n",
            "True: 202, Predicted: 1\n",
            "True: 83, Predicted: 1\n",
            "True: 205, Predicted: 1\n",
            "True: 142, Predicted: 1\n",
            "True: 101, Predicted: 1\n",
            "True: 73, Predicted: 1\n",
            "True: 41, Predicted: 1\n",
            "True: 227, Predicted: 1\n",
            "True: 212, Predicted: 1\n",
            "True: 97, Predicted: 1\n",
            "True: 170, Predicted: 1\n",
            "True: 14, Predicted: 1\n",
            "True: 33, Predicted: 1\n",
            "True: 71, Predicted: 1\n",
            "True: 153, Predicted: 1\n",
            "True: 94, Predicted: 1\n",
            "True: 33, Predicted: 1\n",
            "True: 146, Predicted: 1\n",
            "True: 101, Predicted: 1\n",
            "True: 90, Predicted: 1\n",
            "True: 149, Predicted: 1\n",
            "True: 19, Predicted: 1\n",
            "True: 111, Predicted: 1\n",
            "True: 110, Predicted: 1\n",
            "True: 221, Predicted: 1\n",
            "True: 61, Predicted: 1\n",
            "True: 169, Predicted: 1\n",
            "True: 73, Predicted: 1\n",
            "True: 142, Predicted: 1\n",
            "True: 168, Predicted: 1\n",
            "True: 44, Predicted: 1\n",
            "True: 50, Predicted: 1\n",
            "True: 216, Predicted: 1\n",
            "True: 125, Predicted: 1\n",
            "True: 238, Predicted: 1\n",
            "True: 117, Predicted: 1\n",
            "True: 182, Predicted: 1\n",
            "True: 206, Predicted: 1\n",
            "True: 3, Predicted: 1\n",
            "True: 23, Predicted: 1\n",
            "True: 7, Predicted: 1\n",
            "True: 146, Predicted: 1\n",
            "True: 54, Predicted: 1\n",
            "True: 172, Predicted: 1\n",
            "True: 159, Predicted: 1\n",
            "True: 136, Predicted: 1\n",
            "True: 88, Predicted: 1\n",
            "True: 121, Predicted: 1\n",
            "True: 67, Predicted: 1\n",
            "True: 50, Predicted: 1\n",
            "True: 47, Predicted: 1\n",
            "True: 130, Predicted: 1\n",
            "True: 97, Predicted: 1\n",
            "True: 188, Predicted: 1\n",
            "True: 220, Predicted: 1\n",
            "True: 108, Predicted: 1\n",
            "True: 165, Predicted: 1\n",
            "True: 50, Predicted: 1\n",
            "True: 50, Predicted: 1\n",
            "True: 106, Predicted: 1\n",
            "True: 200, Predicted: 1\n",
            "True: 241, Predicted: 1\n",
            "True: 57, Predicted: 1\n",
            "True: 175, Predicted: 1\n",
            "True: 134, Predicted: 1\n",
            "True: 65, Predicted: 1\n",
            "True: 65, Predicted: 1\n",
            "True: 3, Predicted: 1\n",
            "True: 65, Predicted: 1\n",
            "True: 238, Predicted: 1\n",
            "True: 243, Predicted: 1\n",
            "True: 139, Predicted: 1\n",
            "True: 87, Predicted: 1\n",
            "True: 119, Predicted: 1\n",
            "True: 242, Predicted: 1\n",
            "True: 78, Predicted: 1\n",
            "True: 160, Predicted: 1\n",
            "True: 145, Predicted: 1\n",
            "True: 117, Predicted: 1\n",
            "True: 7, Predicted: 1\n",
            "True: 203, Predicted: 1\n",
            "True: 134, Predicted: 1\n",
            "True: 196, Predicted: 1\n",
            "True: 5, Predicted: 1\n",
            "True: 236, Predicted: 1\n",
            "True: 21, Predicted: 1\n",
            "True: 163, Predicted: 1\n",
            "True: 123, Predicted: 1\n",
            "True: 88, Predicted: 1\n",
            "True: 19, Predicted: 1\n",
            "True: 77, Predicted: 1\n",
            "True: 216, Predicted: 1\n",
            "True: 136, Predicted: 1\n",
            "True: 101, Predicted: 1\n",
            "True: 128, Predicted: 1\n",
            "True: 51, Predicted: 1\n",
            "True: 130, Predicted: 1\n",
            "True: 117, Predicted: 1\n",
            "True: 193, Predicted: 1\n",
            "True: 246, Predicted: 1\n",
            "True: 176, Predicted: 1\n",
            "True: 66, Predicted: 1\n",
            "True: 17, Predicted: 1\n",
            "True: 57, Predicted: 1\n",
            "True: 128, Predicted: 1\n",
            "True: 109, Predicted: 1\n",
            "True: 86, Predicted: 1\n",
            "True: 162, Predicted: 1\n",
            "True: 4, Predicted: 1\n",
            "True: 30, Predicted: 1\n",
            "True: 32, Predicted: 1\n",
            "True: 137, Predicted: 1\n",
            "True: 177, Predicted: 1\n",
            "True: 244, Predicted: 1\n",
            "True: 114, Predicted: 1\n",
            "True: 159, Predicted: 1\n",
            "True: 147, Predicted: 1\n",
            "True: 138, Predicted: 1\n",
            "True: 215, Predicted: 1\n",
            "True: 9, Predicted: 1\n",
            "True: 103, Predicted: 1\n",
            "True: 17, Predicted: 1\n",
            "True: 131, Predicted: 1\n",
            "True: 117, Predicted: 1\n",
            "True: 98, Predicted: 1\n",
            "True: 240, Predicted: 1\n",
            "True: 152, Predicted: 1\n",
            "True: 114, Predicted: 1\n",
            "True: 141, Predicted: 1\n",
            "True: 41, Predicted: 1\n",
            "True: 216, Predicted: 1\n",
            "True: 55, Predicted: 1\n",
            "True: 145, Predicted: 1\n",
            "True: 129, Predicted: 1\n",
            "True: 35, Predicted: 1\n",
            "True: 196, Predicted: 1\n",
            "True: 198, Predicted: 1\n",
            "True: 182, Predicted: 1\n",
            "True: 156, Predicted: 1\n",
            "True: 197, Predicted: 1\n",
            "True: 41, Predicted: 1\n",
            "True: 92, Predicted: 1\n",
            "True: 67, Predicted: 1\n",
            "True: 56, Predicted: 1\n",
            "True: 238, Predicted: 1\n",
            "True: 31, Predicted: 1\n",
            "True: 42, Predicted: 1\n",
            "True: 113, Predicted: 1\n",
            "True: 7, Predicted: 1\n",
            "True: 99, Predicted: 1\n",
            "True: 58, Predicted: 1\n",
            "True: 229, Predicted: 1\n",
            "True: 42, Predicted: 1\n",
            "True: 6, Predicted: 1\n",
            "True: 233, Predicted: 1\n",
            "True: 148, Predicted: 1\n",
            "True: 97, Predicted: 1\n",
            "True: 185, Predicted: 1\n",
            "True: 217, Predicted: 1\n",
            "True: 10, Predicted: 1\n",
            "True: 40, Predicted: 1\n",
            "True: 57, Predicted: 1\n",
            "True: 90, Predicted: 1\n",
            "True: 115, Predicted: 1\n",
            "True: 207, Predicted: 1\n",
            "True: 212, Predicted: 1\n",
            "True: 77, Predicted: 1\n",
            "True: 39, Predicted: 1\n",
            "True: 93, Predicted: 1\n",
            "True: 12, Predicted: 1\n",
            "True: 177, Predicted: 1\n",
            "True: 231, Predicted: 1\n",
            "True: 69, Predicted: 1\n",
            "True: 226, Predicted: 1\n",
            "True: 119, Predicted: 1\n",
            "True: 148, Predicted: 1\n",
            "True: 187, Predicted: 1\n",
            "True: 147, Predicted: 1\n",
            "True: 94, Predicted: 1\n",
            "True: 50, Predicted: 1\n",
            "True: 206, Predicted: 1\n",
            "True: 54, Predicted: 1\n",
            "True: 23, Predicted: 1\n",
            "True: 32, Predicted: 1\n",
            "True: 48, Predicted: 1\n",
            "True: 46, Predicted: 1\n",
            "True: 100, Predicted: 1\n",
            "True: 141, Predicted: 1\n",
            "True: 32, Predicted: 1\n",
            "True: 227, Predicted: 1\n",
            "True: 244, Predicted: 1\n",
            "True: 74, Predicted: 1\n",
            "True: 214, Predicted: 1\n",
            "True: 242, Predicted: 1\n",
            "True: 162, Predicted: 1\n",
            "True: 119, Predicted: 1\n",
            "True: 158, Predicted: 1\n",
            "True: 244, Predicted: 1\n",
            "True: 193, Predicted: 1\n",
            "True: 76, Predicted: 1\n",
            "True: 112, Predicted: 1\n",
            "True: 3, Predicted: 1\n",
            "True: 246, Predicted: 1\n",
            "True: 81, Predicted: 1\n",
            "True: 111, Predicted: 1\n",
            "True: 238, Predicted: 1\n",
            "True: 98, Predicted: 1\n",
            "True: 18, Predicted: 1\n",
            "True: 16, Predicted: 1\n",
            "True: 50, Predicted: 1\n",
            "True: 4, Predicted: 1\n",
            "True: 8, Predicted: 1\n",
            "True: 55, Predicted: 1\n",
            "True: 71, Predicted: 1\n",
            "True: 28, Predicted: 1\n",
            "True: 81, Predicted: 1\n",
            "True: 128, Predicted: 1\n",
            "True: 181, Predicted: 1\n",
            "True: 110, Predicted: 1\n",
            "True: 207, Predicted: 1\n",
            "True: 207, Predicted: 1\n",
            "True: 228, Predicted: 1\n",
            "True: 72, Predicted: 1\n",
            "True: 43, Predicted: 1\n",
            "True: 122, Predicted: 1\n",
            "True: 99, Predicted: 1\n",
            "True: 13, Predicted: 1\n",
            "True: 219, Predicted: 1\n",
            "True: 122, Predicted: 1\n",
            "True: 138, Predicted: 1\n",
            "True: 43, Predicted: 1\n",
            "True: 158, Predicted: 1\n",
            "True: 211, Predicted: 1\n",
            "True: 146, Predicted: 1\n",
            "True: 74, Predicted: 1\n",
            "True: 72, Predicted: 1\n",
            "True: 22, Predicted: 1\n",
            "True: 159, Predicted: 1\n",
            "True: 101, Predicted: 1\n",
            "True: 17, Predicted: 1\n",
            "True: 118, Predicted: 1\n",
            "True: 68, Predicted: 1\n",
            "True: 94, Predicted: 1\n",
            "True: 235, Predicted: 1\n",
            "True: 199, Predicted: 1\n",
            "True: 75, Predicted: 1\n",
            "True: 31, Predicted: 1\n",
            "True: 84, Predicted: 1\n",
            "True: 27, Predicted: 1\n",
            "True: 27, Predicted: 1\n",
            "True: 44, Predicted: 1\n",
            "True: 168, Predicted: 1\n",
            "True: 151, Predicted: 1\n",
            "True: 214, Predicted: 1\n",
            "True: 112, Predicted: 1\n",
            "True: 220, Predicted: 1\n",
            "True: 72, Predicted: 1\n",
            "True: 25, Predicted: 1\n",
            "True: 163, Predicted: 1\n",
            "True: 246, Predicted: 1\n",
            "True: 111, Predicted: 1\n",
            "True: 216, Predicted: 1\n",
            "True: 177, Predicted: 1\n",
            "True: 25, Predicted: 1\n",
            "True: 52, Predicted: 1\n",
            "True: 101, Predicted: 1\n",
            "True: 89, Predicted: 1\n",
            "True: 16, Predicted: 1\n",
            "True: 131, Predicted: 1\n",
            "True: 177, Predicted: 1\n",
            "True: 228, Predicted: 1\n",
            "True: 29, Predicted: 1\n",
            "True: 107, Predicted: 1\n",
            "True: 66, Predicted: 1\n",
            "True: 168, Predicted: 1\n",
            "True: 132, Predicted: 1\n",
            "True: 14, Predicted: 1\n",
            "True: 88, Predicted: 1\n",
            "True: 191, Predicted: 1\n",
            "True: 72, Predicted: 1\n",
            "True: 36, Predicted: 1\n",
            "True: 102, Predicted: 1\n",
            "True: 188, Predicted: 1\n",
            "True: 52, Predicted: 1\n",
            "True: 145, Predicted: 1\n",
            "True: 126, Predicted: 1\n",
            "True: 104, Predicted: 1\n",
            "True: 227, Predicted: 1\n",
            "True: 39, Predicted: 1\n",
            "True: 95, Predicted: 1\n",
            "True: 178, Predicted: 1\n",
            "True: 96, Predicted: 1\n",
            "True: 165, Predicted: 1\n",
            "True: 21, Predicted: 1\n",
            "True: 183, Predicted: 1\n",
            "True: 171, Predicted: 1\n",
            "True: 36, Predicted: 1\n",
            "True: 159, Predicted: 1\n",
            "True: 44, Predicted: 1\n",
            "True: 44, Predicted: 1\n",
            "True: 160, Predicted: 1\n",
            "True: 96, Predicted: 1\n",
            "True: 176, Predicted: 1\n",
            "True: 96, Predicted: 1\n",
            "True: 41, Predicted: 1\n",
            "True: 11, Predicted: 1\n",
            "True: 99, Predicted: 1\n",
            "True: 247, Predicted: 1\n",
            "True: 164, Predicted: 1\n",
            "True: 125, Predicted: 1\n",
            "True: 33, Predicted: 1\n",
            "True: 175, Predicted: 1\n",
            "True: 42, Predicted: 1\n",
            "True: 200, Predicted: 1\n",
            "True: 78, Predicted: 1\n",
            "True: 216, Predicted: 1\n",
            "True: 49, Predicted: 1\n",
            "True: 20, Predicted: 1\n",
            "True: 243, Predicted: 1\n",
            "True: 237, Predicted: 1\n",
            "True: 29, Predicted: 1\n",
            "True: 24, Predicted: 1\n",
            "True: 204, Predicted: 1\n",
            "True: 133, Predicted: 1\n",
            "True: 72, Predicted: 1\n",
            "True: 46, Predicted: 1\n",
            "True: 109, Predicted: 1\n",
            "True: 72, Predicted: 1\n",
            "True: 9, Predicted: 1\n",
            "True: 112, Predicted: 1\n",
            "True: 191, Predicted: 1\n",
            "True: 53, Predicted: 1\n",
            "True: 125, Predicted: 1\n",
            "True: 64, Predicted: 1\n",
            "True: 217, Predicted: 1\n",
            "True: 118, Predicted: 1\n",
            "True: 242, Predicted: 1\n",
            "True: 10, Predicted: 1\n",
            "True: 184, Predicted: 1\n",
            "True: 81, Predicted: 1\n",
            "True: 179, Predicted: 1\n",
            "True: 145, Predicted: 1\n",
            "True: 87, Predicted: 1\n",
            "True: 76, Predicted: 1\n",
            "True: 109, Predicted: 1\n",
            "True: 189, Predicted: 1\n",
            "True: 23, Predicted: 1\n",
            "True: 23, Predicted: 1\n",
            "True: 153, Predicted: 1\n",
            "True: 24, Predicted: 1\n",
            "True: 11, Predicted: 1\n",
            "True: 5, Predicted: 1\n",
            "True: 109, Predicted: 1\n",
            "True: 174, Predicted: 1\n",
            "True: 161, Predicted: 1\n",
            "True: 87, Predicted: 1\n",
            "True: 49, Predicted: 1\n",
            "True: 226, Predicted: 1\n",
            "True: 95, Predicted: 1\n",
            "True: 133, Predicted: 1\n",
            "True: 46, Predicted: 1\n",
            "True: 162, Predicted: 1\n",
            "True: 245, Predicted: 1\n",
            "True: 146, Predicted: 1\n",
            "True: 222, Predicted: 1\n",
            "True: 152, Predicted: 1\n",
            "True: 114, Predicted: 1\n",
            "True: 21, Predicted: 1\n",
            "True: 196, Predicted: 1\n",
            "True: 186, Predicted: 1\n",
            "True: 186, Predicted: 1\n",
            "True: 42, Predicted: 1\n",
            "True: 31, Predicted: 1\n",
            "True: 62, Predicted: 1\n",
            "True: 195, Predicted: 1\n",
            "True: 214, Predicted: 1\n",
            "True: 119, Predicted: 1\n",
            "True: 63, Predicted: 1\n",
            "True: 221, Predicted: 1\n",
            "True: 233, Predicted: 1\n",
            "True: 22, Predicted: 1\n",
            "True: 237, Predicted: 1\n",
            "True: 180, Predicted: 1\n",
            "True: 68, Predicted: 1\n",
            "True: 96, Predicted: 1\n",
            "True: 156, Predicted: 1\n",
            "True: 97, Predicted: 1\n",
            "True: 221, Predicted: 1\n",
            "True: 113, Predicted: 1\n",
            "True: 225, Predicted: 1\n",
            "True: 90, Predicted: 1\n",
            "True: 229, Predicted: 1\n",
            "True: 120, Predicted: 1\n",
            "True: 50, Predicted: 1\n",
            "True: 111, Predicted: 1\n",
            "True: 152, Predicted: 1\n",
            "True: 35, Predicted: 1\n",
            "True: 210, Predicted: 1\n",
            "True: 25, Predicted: 1\n",
            "True: 89, Predicted: 1\n",
            "True: 204, Predicted: 1\n",
            "True: 67, Predicted: 1\n",
            "True: 75, Predicted: 1\n",
            "True: 75, Predicted: 1\n",
            "True: 237, Predicted: 1\n",
            "True: 226, Predicted: 1\n",
            "True: 198, Predicted: 1\n",
            "True: 46, Predicted: 1\n",
            "True: 142, Predicted: 1\n",
            "True: 130, Predicted: 1\n",
            "True: 38, Predicted: 1\n",
            "True: 53, Predicted: 1\n",
            "True: 123, Predicted: 1\n",
            "True: 116, Predicted: 1\n",
            "True: 129, Predicted: 1\n",
            "True: 233, Predicted: 1\n",
            "True: 230, Predicted: 1\n",
            "True: 161, Predicted: 1\n",
            "True: 161, Predicted: 1\n",
            "True: 196, Predicted: 1\n",
            "True: 213, Predicted: 1\n",
            "True: 53, Predicted: 1\n",
            "True: 249, Predicted: 1\n",
            "True: 180, Predicted: 1\n",
            "True: 127, Predicted: 1\n",
            "True: 206, Predicted: 1\n",
            "True: 214, Predicted: 1\n",
            "True: 55, Predicted: 1\n",
            "True: 77, Predicted: 1\n",
            "True: 190, Predicted: 1\n",
            "True: 103, Predicted: 1\n",
            "True: 44, Predicted: 1\n",
            "True: 231, Predicted: 1\n",
            "True: 77, Predicted: 1\n",
            "True: 11, Predicted: 1\n",
            "True: 206, Predicted: 1\n",
            "True: 16, Predicted: 1\n",
            "True: 25, Predicted: 1\n",
            "True: 163, Predicted: 1\n",
            "True: 132, Predicted: 1\n",
            "\n",
            "Correct Predictions (True Label, Predicted Label):\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n",
            "True: 1, Predicted: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "key_list = list(drug_to_idx.keys())\n",
        "val_list = list(drug_to_idx.values())\n",
        "position = val_list.index(1)\n",
        "print(key_list[position])"
      ],
      "metadata": {
        "id": "dW-zdCB-J46k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "35307490-ebd4-4998-e741-3fc20be36918"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DMSO\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "c35Ryf1U0TM2"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
